
def save_transcript_json(session: dict):
    path = os.path.join(TRANSCRIPTS_DIR, f"{session['session_id']}.json")
    with open(path, "w", encoding="utf-8") as f:
        json.dump(session, f, indent=2)
    return path
def generate_simple_pdf(session: dict, output_path: str = None):
    """
    Create a simple PDF report summarizing the session.
    """
    if output_path is None:
        output_path = os.path.join(TRANSCRIPTS_DIR, f"report_{session['session_id']}.pdf")
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, "AI-Powered Excel Mock Interviewer - Report", ln=True, align="C")
    pdf.ln(6)
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 8, f"Candidate: {session['candidate_name']}", ln=True)
    pdf.cell(0, 8, f"Session ID: {session['session_id']}", ln=True)
    pdf.cell(0, 8, f"Date: {datetime.utcnow().isoformat()} UTC", ln=True)
    pdf.ln(6)
    # Scores
    total = sum(session.get("scores", []))
    max_score = len(session.get("scores", [])) * 10
    pct = round(total / max_score * 100, 1) if max_score > 0 else 0.0
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 8, f"Total Score: {total}/{max_score} ({pct}%)", ln=True)
    pdf.ln(4)
    # Per-question
    pdf.set_font("Arial", size=11)
    for i, qa in enumerate(session.get("qa", []), start=1):
        pdf.set_font("Arial", "B", 11)
        pdf.multi_cell(0, 7, f"Q{i}: {qa.get('question')}")
        pdf.set_font("Arial", size=11)
        ans = qa.get("answer") or "(skipped)"
        pdf.multi_cell(0, 6, f"Answer: {ans}")
        ev = qa.get("eval", {})
        pdf.multi_cell(0, 6, f"Score: {ev.get('score')}  Feedback: {ev.get('feedback')}")
        pdf.ln(2)

    # Transcript logging (for future analysis)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 8, "Transcript Log:", ln=True)
    pdf.set_font("Arial", size=10)
    transcript = session.get("transcript", [])
    for turn in transcript:
        pdf.multi_cell(0, 6, f"[{turn.get('timestamp')}] Q: {turn.get('question')} | A: {turn.get('answer')} | Score: {turn.get('eval', {}).get('score')} | Feedback: {turn.get('eval', {}).get('feedback')}")
        pdf.ln(1)
    pdf.ln(6)
    pdf.set_font("Arial", "I", 10)
    pdf.multi_cell(0, 6, "Generated by AI-Powered Excel Mock Interviewer PoC. This is an automated report; for critical hiring decisions, use a human review.")
    pdf.output(output_path)
    return output_path

# report_gen.py
# -----------------------------
# Reporting utilities for Excel Mock Interviewer.
# Generates PDF and JSON reports summarizing candidate performance and transcript.
